"""\nMCP Configuration Persistence Module\n\nThis module provides functions to save and load MCP server configurations\nto ensure they persist between application restarts.\n"""\n\nimport json\nimport os\nimport logging\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional, List\n\nlogger = logging.getLogger(__name__)\n\n# Default location for storing MCP configurations\nCONFIG_DIR = os.path.join(os.path.expanduser("~"), ".config", "job_agent")\nMCP_CONFIG_FILE = os.path.join(CONFIG_DIR, "mcp_config.json")\n\ndef ensure_config_dir():\n    """Ensure the configuration directory exists."""\n    os.makedirs(CONFIG_DIR, exist_ok=True)\n\ndef save_mcp_config(config: Dict[str, Any]) -> bool:\n    """\n    Save MCP server configuration to a persistent file.\n    \n    Args:\n        config: The MCP server configuration to save\n        \n    Returns:\n        bool: True if successful, False otherwise\n    """\n    try:\n        ensure_config_dir()\n        with open(MCP_CONFIG_FILE, 'w') as f:\n            json.dump(config, f, indent=2)\n        logger.info(f"MCP configuration saved to {MCP_CONFIG_FILE}")\n        return True\n    except Exception as e:\n        logger.error(f"Failed to save MCP configuration: {e}")\n        return False\n\ndef load_mcp_config() -> Optional[Dict[str, Any]]:\n    """\n    Load MCP server configuration from the persistent file.\n    \n    Returns:\n        Dict[str, Any] or None: The loaded configuration or None if not found or error\n    """\n    try:\n        if not os.path.exists(MCP_CONFIG_FILE):\n            logger.info(f"No saved MCP configuration found at {MCP_CONFIG_FILE}")\n            return None\n            \n        with open(MCP_CONFIG_FILE, 'r') as f:\n            config = json.load(f)\n        logger.info(f"MCP configuration loaded from {MCP_CONFIG_FILE}")\n        return config\n    except Exception as e:\n        logger.error(f"Failed to load MCP configuration: {e}")\n        return None\n\ndef get_active_servers(mcp_client) -> List[Dict[str, Any]]:\n    """\n    Get information about active MCP servers and their tools.\n    \n    Args:\n        mcp_client: The MultiServerMCPClient instance\n        \n    Returns:\n        List[Dict[str, Any]]: List of server information dictionaries\n    """\n    if not mcp_client:\n        return []\n        \n    servers = []\n    try:\n        for server_id, server in mcp_client.servers.items():\n            server_info = {\n                "name": server_id,\n                "status": "Active" if server.is_connected else "Inactive",\n                "tools": []\n            }\n            \n            # Get tools if server is connected\n            if server.is_connected:\n                try:\n                    # This assumes the server has a get_tools method or similar\n                    # Adjust based on the actual MCP client implementation\n                    tools = server.tools if hasattr(server, "tools") else []\n                    server_info["tools"] = [tool.name for tool in tools]\n                except Exception as e:\n                    logger.error(f"Error getting tools for server {server_id}: {e}")\n            \n            servers.append(server_info)\n    except Exception as e:\n        logger.error(f"Error getting active servers: {e}")\n    \n    return servers